{"body":"RubyMotion-Pixate\r\n=================\r\n\r\nPixate gem for RubyMotion.\r\n\r\n\r\n## Requirements\r\n\r\n- RubyMotion 1.0 or greater (see http://www.rubymotion.com).\r\n\r\n\r\n## Setup\r\n\r\n1. Download the Pixate Framework package from http://www.pixate.com/ and copy the `PXEngine.framework` folder into `vendor` directory. Create the `vendor` directory if it does not exist. You should have something like this.\r\n```\r\n$ ls vendor/PXEngine.framework\r\n/Headers/   PXEngine   Resources/ Versions/\r\n```\r\n\r\n2. Edit the `Rakefile` of your RubyMotion project and add the following require lines.\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'motion-pixate'\r\n```\r\n\r\n3. Still in the `Rakefile`, set up the `user`, `key` and `framework` variables in your application configuration block.\r\n```ruby\r\nMotion::Project::App.setup do |app|\r\n  # ...\r\n  app.pixate.user = 'USER ID'\r\n  app.pixate.key  = 'KEY CODE'\r\n  app.pixate.framework = 'vendor/PXEngine.framework'\r\nend\r\n```\r\n\r\n4. Create the `default.css` in `resources` directory. \r\n\r\n\r\n## Usage\r\n\r\nPixate gem supports [Sass](http://sass-lang.com/) to generate the stylesheet. Create the `sass` directory and `default.scss` with the `rake pixate:init` command. Then, `rake pixate:sass` command generates the stylesheet from `default.scss`.\r\n\r\nYou could specify the Sass output style through `style` environment variable. For example,\r\n```\r\n$ rake pixate:sass style=compressed\r\n```\r\n\r\nYou could use `nested`, `expanded`, `compact` and `compressed` as output style.\r\n\r\nPixate gem provides \"style\" method in REPL. You could change the stylesheet at the moment in REPL. For example,\r\n```\r\n(main)> style \"button { color : blue; }\"\r\n(main)> style \"button { background-color: red; corner-radius: 20pt; }\"\r\n```\r\n","name":"RubyMotion-Pixate","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Pixate gem for RubyMotion."}