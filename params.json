{"name":"RubyMotion-Pixate","tagline":"Pixate gem for RubyMotion.","body":"RubyMotion-Pixate\r\n=================\r\n\r\nPixate gem for RubyMotion.\r\n\r\n\r\n## Requirements\r\n\r\n- RubyMotion 1.0 or greater (see http://www.rubymotion.com).\r\n\r\n\r\n## Setup\r\n\r\n1. Download the Pixate Framework package from http://www.pixate.com/ and copy the `PXEngine.framework` folder into `vendor` directory (or alternatively just create a symbolic link). Create the `vendor` directory if it does not exist. You should have something like this.\r\n```\r\n$ ls vendor/PXEngine.framework\r\n/Headers/   PXEngine   Resources/ Versions/\r\n```\r\n\r\n2. Edit the `Rakefile` of your RubyMotion project and add the following require lines.\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'motion-pixate'\r\n```\r\n\r\n3. Still in the `Rakefile`, set up the `user`, `key` and `framework` variables in your application configuration block.\r\n```ruby\r\nMotion::Project::App.setup do |app|\r\n  # ...\r\n  app.pixate.user = 'USER ID'\r\n  app.pixate.key  = 'KEY CODE'\r\n  app.pixate.framework = 'vendor/PXEngine.framework'\r\nend\r\n```\r\n\r\n4. Create the `default.css` in `resources` directory.\r\n\r\nNote: To install the motion-pixate gem, see the [RubyGems site](https://rubygems.org/gems/motion-pixate).\r\n\r\n## Example\r\n\r\nWe'll take the Timer example that comes with RubyMotion and add Pixate and quickly style the application. Start by following the Setup steps above to add Pixate to the Timer project.\r\n\r\nType `rake` to make sure everything is good so far. You should see the Timer app running.\r\n\r\n![Timer](https://raw.github.com/Pixate/RubyMotion-Pixate/master/Screenshots/timer_run.png)\r\n\r\n## Add the CSS File\r\n\r\nIn the `default.css` file you added prior, let's add a simple entry:\r\n\r\n```css\r\n\tbutton {\r\n\t\tbackground: red;\r\n\t}\r\n```\r\n\r\n`Rake` again and you should see this:\r\n\r\n![Red Button](https://raw.github.com/Pixate/RubyMotion-Pixate/master/Screenshots/red_button.png)\r\n\r\nLet's pretty this button up with the following CSS:\r\n\r\n```css\r\n\tbutton {\r\n\t\tcolor            : #446620;\r\n\t\tbackground-color : linear-gradient(#87c44a, #b4da77);\r\n\t\tborder-width     : 1px;\r\n\t\tborder-color     : #84a254;\r\n\t\tborder-radius    : 10px;\r\n\t\tfont-size        : 15px;\r\n\t\tfont-weight      : bold;\r\n\t}\r\n```\t\r\n\r\n`Rake` again and you should see this:\r\n\r\n![Green Button](https://raw.github.com/Pixate/RubyMotion-Pixate/master/Screenshots/green_button.png)\r\n\r\n## Add a Styling ID\r\n\r\nLastly, let's change the background color. Let's add an ID to our background view. In the `timer_controller.rb` file, add the following line before the `end` of `viewDidLoad`:\r\n\r\n```css\r\n\tview.styleId = 'myView'\r\n```\r\n\r\nWhat's we've done here is add a `styleId` to the view so we can style it by name. Now add the following CSS after your button CSS that was already added:\r\n\r\n```css\r\n\t#myView {\r\n\t\tbackground: linear-gradient(#000000, #f2f4f6);\r\n\t}\r\n```\r\n\r\nNow you have a beautiful interface with just a few lines of CSS!\r\n\r\n![Final App](https://raw.github.com/Pixate/RubyMotion-Pixate/master/Screenshots/background_view.png)\r\n\r\n## SASS\r\n\r\nPixate gem supports [Sass](http://sass-lang.com/) to generate the stylesheet. Create the `sass` directory and `default.scss` with the `rake pixate:init` command. Then, `rake pixate:sass` command generates the stylesheet from `default.scss`.\r\n\r\nYou could specify the Sass output style through `style` environment variable. For example,\r\n```\r\n$ rake pixate:sass style=compressed\r\n```\r\n\r\nYou could use `nested`, `expanded`, `compact` and `compressed` as output style.\r\n\r\nPixate gem provides \"style\" method in REPL. You could change the stylesheet at the moment in REPL. For example,\r\n```\r\n(main)> style \"button { color : blue; }\"\r\n(main)> style \"button { background-color: red; border-radius: 20pt; }\"\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}